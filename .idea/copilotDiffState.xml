<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/include/Rabbit.h">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/include/Rabbit.h" />
              <option name="originalContent" value="#ifndef RABBIT_H&#10;#define RABBIT_H&#10;&#10;#include &lt;rabbitmq-c/amqp.h&gt;&#10;&#10;class Rabbit {&#10;&#10;};&#10;&#10;#endif" />
              <option name="updatedContent" value="#ifndef RABBIT_H&#10;#define RABBIT_H&#10;&#10;#include &lt;rabbitmq-c/amqp.h&gt;&#10;#include &lt;rabbitmq-c/tcp_socket.h&gt;&#10;#include &lt;string&gt;&#10;#include &lt;memory&gt;&#10;#include &lt;functional&gt;&#10;&#10;class Rabbit {&#10;private:&#10;    amqp_connection_state_t conn;&#10;    amqp_socket_t* socket;&#10;    std::string hostname;&#10;    int port;&#10;    std::string username;&#10;    std::string password;&#10;    std::string vhost;&#10;&#10;    void checkReply(amqp_rpc_reply_t reply, const std::string&amp; context);&#10;    &#10;public:&#10;    // Constructor and destructor&#10;    Rabbit(const std::string&amp; host = &quot;localhost&quot;, &#10;           int port = 5672, &#10;           const std::string&amp; user = &quot;guest&quot;,&#10;           const std::string&amp; pass = &quot;guest&quot;,&#10;           const std::string&amp; vhost = &quot;/&quot;);&#10;    ~Rabbit();&#10;&#10;    // Connection management&#10;    bool connect();&#10;    void disconnect();&#10;    bool isConnected() const;&#10;&#10;    // Channel management&#10;    bool openChannel(int channel);&#10;    void closeChannel(int channel);&#10;&#10;    // Queue operations&#10;    void declareQueue(int channel, const std::string&amp; queueName, bool durable = true, &#10;                      bool exclusive = false, bool autoDelete = false);&#10;    void bindQueue(int channel, const std::string&amp; queueName, &#10;                   const std::string&amp; exchangeName, const std::string&amp; routingKey);&#10;&#10;    // Exchange operations&#10;    void declareExchange(int channel, const std::string&amp; exchangeName, &#10;                         const std::string&amp; exchangeType, bool durable = true, &#10;                         bool autoDelete = false);&#10;&#10;    // Message publishing&#10;    bool publish(int channel, const std::string&amp; exchange, const std::string&amp; routingKey, &#10;                const std::string&amp; message, bool mandatory = false);&#10;&#10;    // Message consumption&#10;    bool basicConsume(int channel, const std::string&amp; queueName, &#10;                     const std::string&amp; consumerTag = &quot;&quot;);&#10;    bool getMessage(int channel, std::string&amp; message, int timeoutMs = 1000);&#10;&#10;    // Using callback for message consumption&#10;    bool consumeMessages(int channel, const std::string&amp; queueName, &#10;                        std::function&lt;void(const std::string&amp;)&gt; callback,&#10;                        const std::string&amp; consumerTag = &quot;&quot;);&#10;};&#10;&#10;#endif" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/include/Utils.h">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/include/Utils.h" />
              <option name="originalContent" value="#ifndef UTILS_H&#10;#define UTILS_H&#10;&#10;#include &lt;string&gt;&#10;&#10;class Utils {&#10;public:&#10;    Utils() = delete;&#10;    static void getTimestamp(std::string timestamp);&#10;};&#10;&#10;#endif //UTILS_H&#10;" />
              <option name="updatedContent" value="#ifndef UTILS_H&#10;#define UTILS_H&#10;&#10;#include &lt;string&gt;&#10;#include &lt;chrono&gt;&#10;&#10;class Utils {&#10;public:&#10;    Utils() = delete;&#10;    static std::chrono::system_clock::time_point getTimestamp(std::string timestamp);&#10;};&#10;&#10;#endif //UTILS_H" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>